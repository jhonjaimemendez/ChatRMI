/**
 * Interface: IServerMessage
 * 
 * @version  1.0
 * 
 * @since 06-09-2019
 * 
 * @autor Aga
 *
 */

package component.interfaces;

import java.rmi.Remote;
import java.rmi.RemoteException;
import java.security.Key;

/**
 * Remote methods are specified which the client can executes and offers the server
 */

public interface IServerMessage extends Remote {
	
	
	/**
	* addMessage: Add messages to user history
	*
	* @param message: Message that is added to the history and displayed in the conversation
	* @param user: User who maintains communication and messages are added for your history
	*
	* return boolean true if it was added correctly and false if there were problems adding to the database
	*/
	public boolean addMessage(byte[] encryptedMessage, String user) throws RemoteException;
	
	/**
	* getMessageHistory: Returns customer message history
	*
	* @param user: User who maintains communication and messages are added for your history
	*
	* return Vector<String> Collection containing the message history
	*/
	public String getMessageHistory(String user) throws RemoteException;
	
	
	/**
	* openSession: Open the session by validating the user to the database
	*
	* @param user: Registered user of the database 
	* @param password: Password of the user registered in the database
	*
	* return Vector<String> Collection containing the message history
	*/
	public boolean openSession(String user, String password) throws RemoteException;
	
	/**
	 * Method that receives the remote object from the client in order to send the text from the server
	 * 
	 * @param clientMessage: Remote object sent by the client
	 * @throws RemoteException
	 */
	public void registerClient(IClientMessage clientMessage)throws RemoteException;
	
	/**
	 * Method to close the session
	 * @throws RemoteException
	 */
	public void closeSession() throws RemoteException;
	
	/**
	 * Method that returns the encryption key generated by the server and shared to the client
	 * 
	 * @return Encryption key
	 * @throws RemoteException
	 */
	public Key getKeyEncryption() throws RemoteException;
	
}
